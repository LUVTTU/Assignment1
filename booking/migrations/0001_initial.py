# Generated by Django 5.2.7 on 2025-10-09 09:38

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('department', models.CharField(blank=True, max_length=100)),
                ('is_admin', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title or purpose of the reservation', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the meeting/event')),
                ('start_time', models.DateTimeField(help_text='Start date and time of the reservation')),
                ('end_time', models.DateTimeField(help_text='End date and time of the reservation')),
                ('status', models.CharField(choices=[('PENDING', 'Pending Approval'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled'), ('COMPLETED', 'Completed')], default='PENDING', help_text='Current status of the reservation', max_length=20)),
                ('external_attendees', models.TextField(blank=True, help_text='Names/emails of external attendees (one per line)')),
                ('expected_attendees', models.PositiveIntegerField(default=1, help_text='Total number of people expected (including the organizer)')),
                ('is_recurring', models.BooleanField(default=False, help_text='Is this a recurring event?')),
                ('recurrence_rule', models.CharField(blank=True, help_text='Recurrence rule in iCalendar format (RFC 5545)', max_length=200)),
                ('recurrence_end', models.DateTimeField(blank=True, help_text='End date for recurring events', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by_admin', models.BooleanField(default=False, help_text='Was this reservation created by an admin on behalf of a user?')),
                ('cancellation_reason', models.TextField(blank=True, help_text='Reason for cancellation (if applicable)')),
                ('requires_catering', models.BooleanField(default=False, help_text='Does this reservation require catering services?')),
                ('catering_notes', models.TextField(blank=True, help_text='Special instructions for catering')),
                ('requires_equipment', models.BooleanField(default=False, help_text='Does this reservation require special equipment?')),
                ('equipment_notes', models.TextField(blank=True, help_text='Details about required equipment')),
                ('cost_center', models.CharField(blank=True, help_text='Cost center or budget code for billing', max_length=50)),
                ('is_billable', models.BooleanField(default=False, help_text='Is this a billable reservation?')),
                ('is_private', models.BooleanField(default=False, help_text='Should this event be hidden from public calendars?')),
                ('send_reminder', models.BooleanField(default=True, help_text='Send reminder notifications for this reservation')),
                ('reminder_sent', models.BooleanField(default=False, help_text='Has a reminder been sent for this reservation?')),
                ('approved_by', models.ForeignKey(blank=True, help_text='Admin who approved this reservation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_reservations', to=settings.AUTH_USER_MODEL)),
                ('attendees', models.ManyToManyField(blank=True, help_text='Users who are attending this meeting', related_name='attending_meetings', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User who made the reservation', on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('BOOKING_CONFIRMATION', 'Booking Confirmation'), ('BOOKING_CANCELLATION', 'Booking Cancellation'), ('REMINDER', 'Reminder'), ('ADMIN_APPROVAL', 'Admin Approval'), ('ADMIN_REJECTION', 'Admin Rejection')], max_length=50)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('reservation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='booking.reservation')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('room_type', models.CharField(choices=[('CONFERENCE', 'Conference Room'), ('MEETING', 'Meeting Room'), ('TRAINING', 'Training Room'), ('AUDITORIUM', 'Auditorium')], default='CONFERENCE', max_length=20)),
                ('building', models.CharField(choices=[('MAIN', 'Main Building'), ('NORTH', 'North Wing'), ('SOUTH', 'South Wing'), ('EAST', 'East Wing'), ('WEST', 'West Wing')], default='MAIN', max_length=20)),
                ('floor', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('room_number', models.CharField(max_length=10)),
                ('capacity', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(500)])),
                ('has_projector', models.BooleanField(default=False, verbose_name='Projector')),
                ('has_whiteboard', models.BooleanField(default=True, verbose_name='Whiteboard')),
                ('has_video_conference', models.BooleanField(default=False, verbose_name='Video Conference')),
                ('has_teleconference', models.BooleanField(default=False, verbose_name='Teleconference')),
                ('has_wifi', models.BooleanField(default=True, verbose_name='WiFi')),
                ('has_tv', models.BooleanField(default=False, verbose_name='TV')),
                ('has_podium', models.BooleanField(default=False, verbose_name='Podium')),
                ('is_active', models.BooleanField(default=True, help_text='Is this room available for booking?')),
                ('requires_approval', models.BooleanField(default=False, help_text='Does booking this room require admin approval?')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the room and its features')),
                ('image', models.ImageField(blank=True, null=True, upload_to='room_images/')),
                ('max_occupancy', models.PositiveIntegerField(blank=True, help_text='Maximum number of people allowed (for fire safety)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('managed_by', models.ForeignKey(blank=True, help_text='Staff member responsible for this room', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_rooms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='reservation',
            name='room',
            field=models.ForeignKey(help_text='Room being reserved', on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='booking.room'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['start_time', 'end_time'], name='booking_res_start_t_ff3452_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['status'], name='booking_res_status_9dd5a0_idx'),
        ),
    ]
